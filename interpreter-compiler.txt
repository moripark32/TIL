<컴파일러와 인터프레터>
	

	컴파일러 :
	사람이 알아볼수있는 단어로 작성된 언어를 컴퓨터가 이해하는 언어로 변환하는 작업을 컴파일이라고 한다.
	

	기계어 > 어셈블리어 > 하이레벨언어 > c언어 , 자바 etc 
	- 빌드타임에 프로그래머가 작성한 모든 소스코드에 대한 기계어를 생성(번역)
	- 런타임에 빌드타임에서 생성한 모든 기계어를 기계로 보냄
	- 번역과 실행이 따로 이루어짐
	- 빌드 타임에 모든 구문 분석과 기계어 변환이 이루어지기 때문에 빌드가 느림
	- 런타임의 경우 특별한 과정이 없어 속도가 빠름
	- 운영체제에 종속적이므로 운영체제에 맞는 컴파일러가 필요
	- 대표적인 언어: C, C++
	-> 목적프로그램을 만들고 이 목적 프로그램을 실행하는 명령을 지시함으로써 실제 프로그램을 시행
	

	인터프레터 :
	- 런타임에 한 행씩 분석하여 알맞은 기계어를 생성한 뒤 기계로 보냄 (소스코드를 한줄씩 읽어들이면서 실행)
	- 실행속도가 느리지만 코드 변경시 즉시 실행이 가능하여 테스트에 용이
	- 번역과 실행이 동시에 이루어짐
	- 별도의 실행파일이 존재하지 않음
	- 대표적인 언어: 스크립트 언어
	(ex 자바스크립트 파이썬) 
	-> 소스 프로그램을 컴파일 하여 목적 프로그램을 생성하지 않고 라인 단위로 해석하면서 바로 실행
	컴파일 언어는 대표적으로 C언어가 이에 해당하고, 대다수의 프로그래밍 언어가 이에 해당한다. 작성한 코드를 기계어로 번역을 해놓기 때문에 실행 속도가 빠르고 보안성이 높다.
	하지만, 코드 수정을 조금이라도 한다면, 다시 컴파일을 해야 하기 때문에 개발 기간이 오래 걸리지만, 개발 후 실행 속도는 가장 빠르다.
	

	->인터프리터 언어는 대표적으로 python언어가 이에 해당되고, 컴파일 언어와는 달리 코드를 한 줄씩 번역, 실행하는 방식이다. 따라서 실행 속도는 컴파일 언어 보다 느리지만, 코드 수정시 바꾼 부분만 번역, 실행하여 빠르게 수정이 가능하다. 심지어 실행 중에도 수정이 가능하다.
	그리고, 컴파일 언어보다 문법이 쉬운 편이다. 단, 보안성이 떨어지는 편이다. 하지만, 작성이 빠르기 때문에, 빠른 아이디어 구현이 쉬워 빠른 프로그램 구현이 가능하다.

