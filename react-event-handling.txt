
사용자가 브라우저에서 특정 DOM 요소와 상호작용하는 것을 이벤트라고 부른다. 
예를 들어 버튼을 Click 하는 onClick 이벤트라든지 입력 요소의 값이 변경되는 
onChange 이벤트와 같이 사용자의 특정 행동에 대해 핸들러를 통해 특정 이벤트에 대해 처리를 할 수 있다. 
리액트(React)에서는 이벤트 처리와 관련해서 몇 가지 주의사항이 있다.
- 이벤트 이름은 CamelCase 형식으로 작성한다.
- 이벤트 핸들러는 자바 스크립트 코드가 아닌 함수 구현체에 해당하는 값을 전달한다.
- DOM 요소에만 이벤트를 지정할 수 있다.

<button onClick = {() => {console.log("Click")}}>
    Click
</button> 이렇게 렌더링하는 시점에 함수를  만들어서 인라인 으로 전달할 수있고, 
    handleClick = () => {
    console.log("Click");
}
<button onClick = {this.handleClick}>
    Click
</button> 와 같이 this키워드로 미리 구현해놓은 함수 구현체의 이름을 전달할수있다.

클래스형 컴포넌트에서 public class fields 문법을 사용하여 화살표 함수로 메소드를 구현하면, 
예전과 같이 bind를 해줄 필요 없이 간편하게 작성할 수 있다. 화살표 함수의 this는 부모 함수의 this를 상속받는데 
JS에서 클래스는 함수로 구현되어 있기 때문에 this는 컴포넌트 자신이 되므로 bind(this)를 하지 않아도 된다.

클래스 컴포넌트로 이벤트 핸들링하는 방법과 함수형 컴포넌트로 이벤트 핸들링하는 법 비교 :

비교 코드 1) 함수형

import React, { useState } from "react";
const EventPractice = () => {
  const [username, setUsername] = useState("");
  const [message, setMessage] = useState("");
  const onChangeUsername = (e) => setUsername(e.target.value);
  const onChangeMessage = (e) => setMessage(e.target.value);
  const onClick = () => {
    alert(username + ": " + message);
    setUsername("");
    setMessage("");
  };
  const onKeyPress = (e) => {
    if (e.key === "Enter") {
      onClick();
    }
  };
  return (
    <div>
      <h1>Event Practice</h1>
      <input
        type="text"
        name="username"
        placeholder="User name"
        value={username}
        onChange={onChangeUsername}
      />
      <input
        type="text"
        name="message"
        placeholder="type something"
        value={message}
        onChange={onChangeMessage}
        onKeyPress={onKeyPress}
      />
      <button onClick={onClick}>Submit</button>
    </div>
  );
};
export default EventPractice;


비교 코드 2)

import React, { Component } from "react";
class EventPractice extends Component {
  state = {
    username: "",
    message: "",
  };
  handleChange = (e) => {
    this.setState({
      [e.target.name]: e.target.value,
    });
  };
  handleClick = () => {
    alert(this.state.username + ": " + this.state.message);
    this.setState({
      username: "",
      message: "",
    });
  };
  handleKeyPress = (e) => {
    if (e.key === "Enter") {
      this.handleClick();
    }
  };
  render() {
    return (
      <div>
        <h1>Event Practice</h1>
        <input
          type="text"
          name="username"
          placeholder="User name"
          value={this.state.username}
          onChange={this.handleChange}
        />
        <input
          type="text"
          name="message"
          placeholder="type something"
          value={this.state.message}
          onChange={this.handleChange}
          onKeyPress={this.handleKeyPress}
        />
        <button onClick={this.handleClick}>Submit</button>
      </div>
    );
  }
}
export default EventPractice;











